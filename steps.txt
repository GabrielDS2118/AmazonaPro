1.Configuracion desde cero:
    Instalar: Google, Node, Git
    Ver versiones de node,git y npm 
    VsCode:

        Prettier:Codigo estetico
            settings > default formatter > Prettier - code formatter
                       formatOnSave > check
                       Prettier:SingleQoute > check

        Corchetes JSON:
           ctr + shift + p
           json > Preferences: Open Settings
           Add setting: Corchetes coloreados
                "editor.bracketPairColorization.enabled": true

        EsLint: Mostrar errores

        JavaScript (ES6) code snippets
        ES7 React/Redux/GraphQL/React-Native snippets

    Iniciando:
        npx create-react-app frontend
        cd frontend
        npm start
        Abrir en el navegador
        Ir a src/App.js y hacer un template básico del header y la lista de productos,agregar estilos en index.css
    
    Git:
        Eliminar el repositorio dentro de frontend: rm -rf .git
        Mover el archivo .gitignore de frontend a la carpeta principal(EcommerceMern)
        En .gitignore quitar el / en node_modules y build

        Inicializar un nuevo repositorio en ecommercemern: git init

2.Lista de Productos: 
    - En la carpeta padre hacer un README.md

    - src/data.js
        Clonar repositorio del profesor https://github.com/basir/mern-amazona.git
        2.1 Crear array de productos en src/data.js
        2.2 Añadir images de los productos:
            Carpeta de imagenes public/images (copiarlas del repositorio del profesor)
        2.3 Renderizar productos:
            En src/App.js importar los productos de src/data.js:
            Mostrar imagen,nombre,precio y boton para añadir al carrito
            
        2.4 Estilos en index.js

3.Routing

    3.1 npm i react-router-dom en frontend
    3.2 src/App.js
        Envolver todo en un BrowserRouter,rutas:
        
            '/' -> screens/HomeScreen (renderizar todos los productos):
                Cuando se le de click a la img de cada producto (Link to) se enviará a '/product/:slug'

            '/product/:slug' -> screens/ProductScreen (detalle del producto)

4. Create Node Server

    EcommerceMern/backend:

        1. Correr npm init in backend folder 
        2. Update package.json set type: module
        3. npm install express
        4. Archivo server.js -> crear server:
            En la ruta get '/api/products' la response serán los productos (para esto necestimoas mover el archivo 
            frontend/src/data.js a la carpeta backend)
        
        5.Probar ruta get '/api/products':
            node server.js
            Abrir en el navegador la ruta http://localhost:5000/api/products y ver si se muestran los productos
            Instalar JSONViewer para que los JSON se vean bien
        
        6.Instalar nodemon para no tener que escribir node server.js cada vez que se hacen cambios
            npm install nodemon --save-dev
            Comando start en package.json: 
                "start": "nodemon server.js"
            npm start

5. Fetch Products From Backend:

    - frontend/
        1.Añadir proxy en package.json
        2.npm install axios
        3.Consultar a la API en src/screens/HomeScreen.js:
            useState -> inicialmente la lista de productos será una lista vacia
            Despues de consultar a la API mediante el useEffect la lista de productos sera la response

6.Manejar estado con useReducer
    Usar useReducer en HomeScrren.js para manejaar el estado de una manera más compleja

7.Agregar Boostrap

    frontend/
    npm install react-bootsrap bootstrap --force
    npm install -S react-router-bootstrap --force

    Modificar frontend/src/: 
            App.js -> Modificar navBar y hacer footer
            index.css, 
            index.js

8.Componente Product

    Ahora el HomeScreen accedera al component Product.js
    frontend/src/components/Product.js:
        Mostrar los productos como cards de bootsrap
        Cada producto tendra un rating (frontend/src/components/Rating.js:)

    
    Agregar fontawsome en frontend/public/index.html
    Estilos para el rating frontend/src/index.css

9.Detalle de Producto

    backend/server.js -> Ruta para acceder a un producto en especifico

    src/screens/ProductScreen.js:
        Acceder a un producto en especifico
        crear 3 columnas: image, info and action (mostrar si el producto esta disponible o no)
        Estilo .img-large en  frontend/src/index.css

    Nombre del tab -> Helmet

        frontend/
        npm install react-helmet-async
        
        frontend/src/index.js
            Envolver toda la aplicacion en Helmet
        
        frontend/src/screens/ProductScreen.js:
            Envolver el nombre del producto en un Helmet

        frontend/src/screens/HomeScreen.js
            Poner dentro de un Helmet el title Amazona

10.Create Loading and Message Component
    Capturar por ejemplo el mensaje de que no existe producto y mostrarlo en rojo

11. Create React Context (Sumar productos en el carrito)
    2. define reducer (frontend/src/Store.js)
    3. create store provider : Envolver la aplicacion en un StoreProvider (frontend/src/index.js)
    4. implement add to cart button click handler (frontend/src/screens/ProductScreen.js)

12.Completar add to cart 

    Verificar si existe el producto en el carrito:
        backend/data: Agregar un campo _id a cada producto
        backend/server.js: Nuevo endpoint que busca un producto segun el _id
        frontend/src/Store.js: Si el new item ya esta en el carro solo se actualiza la cantidad de lo controrio se agrega

    Ver si hay suficientes unidades 
        frontend/src/screens/ProductScreen.js
            Si no hay suficientes unidades se mostrará una alarma que dice ('Sorry. Product is out of stock')

    Mostrar cantidad de productos:
        frontend/src/App.js
        usar reduce para sumar la cantidad de todos los productos

13.Vista del carrito

    CartScreen: 
        Mostrar imágen del producto, botones de agregar y restar:
            El boton de sumar 1 estará desabilitado si la cantidad de items es igual a las unidades disponibles
            El boton de restar 1 estará desabilitada si la cantidad de items es igual a 1

    Ruta a la vista del carrito:
        Crearla en App.js
        Usar navigate en ProductScreen para redirecionar al dar click al boton Add to Cart
    
    Eliminar del carrito
        Crear  case 'CART_REMOVE_ITEM' en Store.js
        Trash en CartScreen.js
    
    Almacenamiento con localStorage para que al recargar el navegador no se pierda la informacion

    Redirigir al checkout cuando se de click en Proceed to Checkout:
        En CartSecreen.js se debe dirigir primero por medio del navigate al sig in
    
    Implementar Add to Cart en HomeScreen:
        Si no hay unidades disponibles se mostrará el boton de que no esta disponible

14 Crear vista SigIn
    screens/SiginScreen.js
    Crear routing en src/App.js

15.Conectarse a la base de datos MongoDB

    Atlas
        Entrar https://www.mongodb.com/atlas y loguearse
        Entrar a https://cloud.mongodb.com/v2#/org/633ae5328b18fc68bca8737d/projects y crear un nuevo proyecto

        Build a Database:
            Shared(Free)
            Create a Shared Cluster (dejar todo por defecto)
            Usuario:
                name -> gabecomerce
                password -> mtzgblv1922
            
            
            Where would you like to connect from?
                IPAdreess -> 0.0.0.0/0  (everywhere)
                Description -> Love
                Add Entry
            
            Finish and close

            Go to Database

            BrowserCollections > Add My Own Data
                Create Database 
                    Db name -> amazonapro
                    Collection name -> pruebas-cl
                    Additional Preferences -> everything unchecked

        Conectarse

                - DEPLOYMENT > Database > Connect > Connect your aplication
                    Copiar connection string
                - backend/.env -> En una variable gurdar el connection string
                    Asegurarse de ignorar el archivo .env en .gitignore
                
                - Instalaciones (backend/):
                    npm install mongoose
                    npm install dotenv
                
                server.js
                    Conectarse a MongoDB leyendo la variable de entorno 

16.Crear productos ejemplos en la base de datos (backend/)

    models/productModel.js -> Crear Schema y Modelo
        timestaps: true -> Mostrar campos de creado y actulizado at

    routes/

        - seedRoutes.js: '/' (Insertara todos los productos que estan en data.js)
            En data.js eliminar los _id, mongo los asignará
            Verificar creacion de productos en la base de datos: 
                Database > BrowserCollections > Collections > amazonagreat.products

        - En server.js usaremos los routings (modularidad)

        - productRoutes.js

17.Crear Users ejemplos en la base de datos

    backend/
        Instalar bcryptjs -> npm i bcryptjs
        Agregar users en data.js
        Crear schema (models/userModel.js)
        En routes/seddRoutes.js insertar los usuarios
    
    Abrir en el navegador http://localhost:5000/api/seed para que se creen los usuarios

18.SigIn API

    backend/

        npm install express-async-handler
        npm install jsonwebtoken

        routes/userRoutes.js 
            - Verificar si el correo exite
            - Verificar que la contraseña no encriptada corresponde con la encriptada
            - Generar un token (utils.js)
                token -> informacion del usuario, llave de seguridad(.env), expiracion
        
        Agregar routing de users en server.js

        Verificar API

            Agregar a chrome el plugin Advance Rest Client
                 https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo
            
            En chrome://apps/ seleccionar ARC

                Post http://localhost:5000/api/users/singin

                Body:
                    Body content type -> applicaction/json
                    Editor view -> Raw input
                    FORMAT JSON  MINIFY JSON
                    {
                        "email": "correousuariobd@gmail.com"
                        "password": "contraseñausariobd"
                    }

                    SEND

19.Vista SignIn

    userRoutes.js escribir correctamente el path /signin
    Volver a probar en ARC

    frontend/

        npm install react-toastify --force (Mostrar mensaje cuando la contraseña o el correo son incorrectos)

        src/Store.js
            El initialState tendrá una nueva llave llamada userInfo cuyo valor estará guardado en el localStorage

        src/screens/SiginScreen.js
             Hará una request a la API para verificar que el correo y el passwrod estan en la base de datos
             Guardará la respuesta de la solicitud en el localStorage 
        
        src/App.js
            Si hay informacion en el userInfo mostrará el nombre del usuario en el navBar
            En caso contrario mostrára SigIn
            Al darle Sign Out la funcion signoutHandler quitara la informacion guradada en userInfo

